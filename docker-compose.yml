version: '3'
services: 
    api-gateway:
        hostname: gateway
        image: samyon196/rri-gateway:1.0.6
        networks:
            - lan
        ports:
            - 80:80

    app-fe:
        hostname: app-frontend
        image: samyon196/rri-app-fe:0.1.12
        networks:
            - lan
        ports:
            - 3000:80

    app-be:
        hostname: app-backend
        image: samyon196/rri-app-be:0.1.12
        environment:
            WAIT_HOSTS: rabbitmq:5672, mongodb:27017
        networks:
            - lan
        ports:
            - 3095:3095

    router:
        image: yuvaltoker/adjusted-dlep:1.3.2
        tty: true
        stdin_open: true
        restart: on-failure
        depends_on:
            - mongodb
            - rabbitmq
        networks:
            - lan
        environment:
            - IMPLEMENTATION=router
            - OUT_WRITER=out_db
            - DISCOVERY_IFACE=eth0
            - DISCOVERY_INTERVAL=15
            - HEARTBEAT_INTERVAL=10
            - EXT_PAUSE=true
            - EXT_LID=true
            - PEER_TYPE=im_router
            - RMQ_HOST=rabbitmq
            - DB_NAME=rri
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=example
            - ME_CONFIG_MONGODB_URL=mongodb://root:example@mongodb:27017/
            - WAIT_HOSTS=rabbitmq:5672,mongodb:27017

    modem1:
        image: yuvaltoker/adjusted-dlep:1.2.1
        tty: true
        stdin_open: true
        networks:
            - lan
        environment:
            - IMPLEMENTATION=modem
            - DISCOVERY_IFACE=eth0
            - HEARTBEAT_INTERVAL=10
            - EXT_PAUSE=true
            - EXT_LID=true
            - PEER_TYPE=ORG\;yuval\;19837\;33
            
    modem2:
        image: yuvaltoker/adjusted-dlep:1.2.1
        tty: true
        stdin_open: true
        networks:
                - lan
        environment:
            - IMPLEMENTATION=modem
            - DISCOVERY_IFACE=eth0
            - HEARTBEAT_INTERVAL=10
            - EXT_PAUSE=true
            - EXT_LID=true
            - PEER_TYPE=ORG\;dan\;23455\;44

    redis_db:
        image: redis:latest
        ports:
            - "6379"
        networks:
            - lan
        container_name: redis_db  
        tty: true
        stdin_open: true

    snmpd:
            image: yuvaltoker/snmpd:1.0
            networks:
                - lan
            depends_on:
                - redis_db
            container_name: snmpd
            tty: true
            stdin_open: true


    controller:
        image: yuvaltoker/controller-stub:0.0.8
        networks:
            - lan
        environment:
            - RMQ_HOST=rabbitmq
            - QUEUE_NAMES=tests_list,setup_ready,results,all_results_ready,pdfs,pdf_ready
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=example
            - ME_CONFIG_MONGODB_URL=mongodb://root:example@mongodb:27017/
            - DB_NAME=rri
            - TIME_DELAY=1
            - WAIT_HOSTS=rabbitmq:5672,mongodb:27017
            - PRIV_PASS=yuval12345
            - AUTH_PASS=yuval12321
            - USER_NAME=mynewuser
            - STATE=testing
            # STATE is for distiguishing between 'testing' state and 'production' state, and its purpose is  
            # to know where the snmpd is located, in snmpd container (when testing), or on the ip address of the modem (when on production)
        volumes:
            - /home/dan/idf_repos/tests/tests:/tests

    report_generator:
    # version 0.0.1 is working but notice on dockerhub for latest version 
        # image: dannaor/rg:0.0.1 \
        container_name: report_generator
        build: ./rg
        hostname: report_generator
        # only for displaying the pdf in the filesystem delete when done with dev
        volumes:
          - /home/dan/idf_repos/report_generator_service:/app/pdfs
        environment:
        - WAIT_HOSTS=mongodb:27017,rabbitmq:5672
        - TOKEN=c21beeafd4289e8ff916666666692333
        - RMQ_HOST=rabbitmq
        - MONGO_INITDB_ROOT_USERNAME=root
        - MONGO_INITDB_ROOT_PASSWORD=example
        - ME_CONFIG_MONGODB_URL=mongodb://root:example@mongodb:27017/
        - DB_NAME=rri
        - QUEUE_NAMES=pdfs
        ports:
        - "6969:6969"
        restart: on-failure
        # command: tail -F anything
        networks:
        - lan
        
    file-hosting:
        image: mayth/simple-upload-server
        hostname: file-hosting
        command:
        - -token
        - c21beeafd4289e8ff916666666692333
        - -protected_method
        - POST,PUT,GET
        - -upload_limit # 768 MB
        - "805306368"
        - -port
        - "80" # dir in docker to use for uploads/downloads
        - /var/data
        volumes:
        - /dockers/uploader:/var/data
        networks:
        - lan
    rabbitmq:
        networks:
            - lan
        container_name: rabbitmq
        image: rabbitmq:3.9.8-management-alpine
        stdin_open: true
        tty: true
        # network_mode: host
        ports:
            - "5672:5672"
            - "15672:15672"

    mongodb:
        networks:
        - lan
        container_name: mongodb
        hostname: mongodb
        image: mongo
        restart: always
        environment:
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=example
        # network_mode: host
        ports:
            - "27017:27017"

    mongo-express:
        networks:
            - lan
        image: mongo-express
        restart: always
        # network_mode: host
        ports:
            - "8081:8081"
        environment:
            - ME_CONFIG_MONGODB_URL= mongodb://root:example@mongodb:27017/
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=example

    dozzle:
        container_name: dozzle
        image: amir20/dozzle:latest
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - 8080:8080


networks:
    lan:
        ipam:
            driver: default
